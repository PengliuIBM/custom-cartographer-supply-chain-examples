#@ load("@ytt:data", "data")

---
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: deliverable-config-writer-and-pr-template
spec:
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:json", "json")
    #@ load("@ytt:base64", "base64")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.deliverable.metadata, "labels"):
    #@     labels.update(data.values.deliverable.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.deliverable.metadata.name + "-config-writer-pull-requester"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "config-writer-pull-requester" })
    spec:
      #@ if/end hasattr(data.values.deliverable.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.deliverable.spec.serviceAccountName

      runTemplateRef:
        name: commit-and-pr-pipelinerun

      inputs:
        serviceAccount: #@ data.values.params.serviceAccount
        git_server_kind: "github"
        git_server_address: "https://github.com"
        commit_branch: ""
        pull_request_title: #@ "ready for review, delivery revision: " + data.values.source.revision
        pull_request_body: "generated by supply chain"
        repository_owner: #@ data.values.params.deliverable_repository_owner
        repository_name: #@ data.values.params.deliverable_repository_name
        base_branch: "main"
        git_user_name: "supplychain"
        git_user_email: "supplychain@cluster.local"
        git_commit_message: "supply chain promoted workload"
        git_files: #@ base64.encode(json.encode(data.values.config))
        sub_path: #@ "config/" + data.values.deliverable.metadata.namespace + "/" + data.values.deliverable.metadata.name
