#@ load("@ytt:data", "data")

apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: image-writer
spec:
  params:
  - name: serviceAccount
    default: default
  - name: registry
    default: {}
  
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:json", "json")
    #@ load("@ytt:base64", "base64")

    #@ def image():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@      "bundle",
    #@    ])
    #@   ]) + ":" + data.values.workload.metadata.uid
    #@ end

    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name + "-config-writer"
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

      runTemplateRef:
        name: tekton-taskrun

      inputs:
        serviceAccount: #@ data.values.params.serviceAccount
        taskRef:
          kind: ClusterTask
          name: image-writer
        params:
          - name: files
            value: #@ base64.encode(json.encode(data.values.config))
          - name: bundle
            value: #@ image()
          #@ end