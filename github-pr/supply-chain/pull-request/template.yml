#@ load("@ytt:data", "data")
---
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: pull-request
spec:
  params:
  - name: pr_target_branch
    default: "main"
  - name: pr_title
    default: "Supply chain produced a deliverable"
  - name: pr_body
    default: "Please review the updated artifacts."
  ytt: |
    #@ load("@ytt:data", "data")

    #@ def repo_host():
    #@   source_url = data.values.sources.url
    #@   if source_url.startswith("ssh"):
    #@     return (source_url.split("ssh://git@github.com/")[1]).split(".git")[0] 
    #@   end
    #@   
    #@   return (source_url.split("https://git@github.com/")[1]).split(".git")[0]
    #@ end

    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name + "-pull-request"
      labels:
        app.kubernetes.io/component: pull-request
        #@ if/end hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "app.kubernetes.io/part-of"):
        app.kubernetes.io/part-of: #@ data.values.workload.metadata.labels["app.kubernetes.io/part-of"]
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

      runTemplateRef:
        name: github-open-pr-taskrun

      inputs:
        serviceAccount: #@ data.values.params.serviceAccount
        taskRef:
          kind: ClusterTask
          name: github-open-pr-task
        params:
          - name: REPO_FULL_NAME
            value: #@ repo_host()
          - name: HEAD
            value: #@ data.values.sources.revision
          - name: BASE
            value: #@ param("pr_target_branch")
          - name: TITLE
            value: #@ param("pr_title")
          - name: BODY
            value: #@ param("pr_body")